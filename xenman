#!/usr/bin/php
<?PHP
$usage = <<<EOF
unRaid Xen Manager

Usage: xenman register [configfile]

  Register an existing domain with xenman. [configfile] must be the absolute path of a xen configuration file.
  We will look for a "name" property in this file that will define the domain name (domname).  Note that
  the 'name' property in a xen configuration file is used by xen to identify the domain, and must be unique.
  
  We assume the parent directory of the xen configuration file also holds domain-specific files such as
  disk image file(s).  This parent directory is called the "domain" directory.  xenman will look for these
  optional files in the domain directory:

  README.md - a file containing user-maintained notes pertaining to the domain.

  icon.png (or <domname>.png) - an icon for the domain.
  
  <configfile>- (that is, same name as the xen configuration file but with a dash at the end) - this is considered
  the "factory default" xen configuration settings.  If this file does not exist then the first time a user opens
  the domain settings page it will be created by copying the xen configuration file.  The purpose of this file
  is to provide an easy way for the user to "start over" when experimenting with xen configuration settings.

  The registration process consists of creating these files:
  - "/boot/config/domains/<domname>.cfg" and
  - "/boot/config/domains/<domname>.png" (if an icon file is present in the domain directory)
    
  The "<domname>.cfg" file is a PHP ini-file which holds configuration information used by xenman and should
  not be confused with the xen configuraiton file (which often also has ".cfg" extension).  Variables in this file
  include:
  - "configfile=[configfile]" - the absolute path of the xen configuration file.
  - "autostart=no|yes" - whether the domain should be automatically started upon array start.

  When a domain is marked "autostart=yes" then we will create a symlink named "/etc/xen/auto/<domname>" that points
  to the domain xen configuration file.

Usage: xenman start [domname]

  Start the domain (i.e., xen create).

Usage: xenman shutdown [domname]

  Tell the domain to shutdown and wait for it.
  
Usage: xenman delete [domname]

  Delete a domain.  The domain must already be shutdown.  USE WITH CAUTION: we delete *everything*
  associated with the domain:
  - the xenman domain configuration file and icon
  - the domain directory and all its content

Usage: xenman clone [domname] [clone_domname] [ [path] ]

  Clone a domain.  If [path] is not given, we use the same path where the [domname] domain is stored.  The
  [domname] domain must be shut down.  Pay attention to how this works:

  First we create the clone domain directory named [path]/[clone_domname].

  Next we copy all the files from the [domname] domain directory to the clone domain directory, processing each
  file as follows:
    - If any part of the filename contains the string "[domname]" we replace it with the string "[clone_domname]".
    - If the file is the [domname] xen configuration file, then in addition to possibly renaming it, we look inside
      the file and replace all occurances of the string "[domname]" with the string "[clone_domname]".  We also
      replace all occurances of the domname domain with the clone domain.

  Finally, we register the new clone domain.

  This mostly works but you should carefully examine the clone domain directory as well as the clone xen configuration
  file before attempting to start the clone domain.  Note that there will likely be more work to do once the clone domain
  is started, e.g., to change the guest OS hostname, IP address, etc.
  
  Note: the clone operation does not copy subdirectories of the [domname] domain.

Usage: xenman autostart

  Creates symlinks in /etc/xen/auto to all xen configuration files for domains with "autostart=yes".
  Used by xenman disks_mounted event handler.

EOF;

// This is where we store the domain configuration files (on the flash).
//
$domains = "/boot/config/domains";

function parse_configfile($configfile) {
  return json_decode(shell_exec("xl -N create $configfile | tail -n +2"), true);
}

// To "register" a domain means to create a domain configuration file for it.
//
function register($configfile, $domains) {
  $config = parse_configfile($configfile);
  $domname = $config['config']['c_info']['name'];
  $domcfgfile = "$domains/$domname.cfg";
  file_put_contents("$domcfgfile",
                    "autostart=\"no\"\n" .
                    "configfile=\"$configfile\"\n");
  // if we have an icon, let's use it
  $domain = dirname($configfile);
  if (file_exists($icon = "$domain/icon.png") or
      file_exists($icon = "$domain/$domname.png"))
    copy($icon, "$domains/$domname.png");
}

// xenman method
//
if ($argc < 2) {
  echo $usage;
  exit(1);
}
$method = strtolower($argv[1]);

// xenman autostart
//
if ($method == "autostart") {
  @mkdir($domains);
  foreach (glob("$domains/*.cfg", GLOB_NOSORT) as $domcfgfile) {
    $domcfg = parse_ini_file($domcfgfile);
    if ($domcfg === FALSE)
      continue;
    if ($domcfg['autostart'] == "yes") {
      $configfile = $domcfg['configfile'];
      $config = parse_configfile($configfile);
      $domname = $config['config']['c_info']['name'];
      if ($domname)
        exec("ln -sf $configfile /etc/xen/auto/$domname", $output, $retval);
    }
  }
  exit(0);
}

// xenman register [configfile]
//
if ($method == "register") {
  if ($argc < 3) {
    echo $usage;
    exit(1);
  }
  $configfile = $argv[2];
  if (!file_exists($configfile)) {
    echo "xenman: $configfile does not exist\n";
    exit(1);
  }
  register(realpath($configfile), $domains);
  exit(0);
}

// xenman [method] [domname] ...
//
if ($argc < 3) {
  echo $usage;
  exit(1);
}
$domname = $argv[2];
$domcfgfile = "$domains/$domname.cfg";
if (!file_exists($domcfgfile)) {
  echo "xenman: $domname not registered\n";
  exit(1);
}
$domcfg = parse_ini_file($domcfgfile);
$configfile = $domcfg['configfile'];
$domain = dirname($configfile);

// xenman start [domname]
//
if ($method == "start") {
  $domid = exec("xl domid $domname", $output, $retval);
  if ($retval == 0) {
    echo "xenman: $domname already started\n";
    exit(1);
  }
  // invoke xl create
  system("xl create $configfile", $retval);
  exit($retval);
}

// xenman shutdown [domname]
//
if ($method == "shutdown") {
  $domid = exec("xl domid $domname", $output, $retval);
  if ($retval != 0) {
    echo "xenman: $domname already shut down\n";
    exit(1);
  }
  // invoke xl shutdown
  system("xl shutdown $domid --wait", $retval);
  sleep(1);
  exit($retval);
}

// xenman delete [domname]
//
if ($method == "delete") {
  $domid = exec("xl domid {$domname}", $output, $retval);
  if ($retval == 0) {
    echo "xenman: $domname must be shut down first\n";
    exit(1);
  }
  // un-register
  system("rm $domains/$domname.*", $retval);
  // for now let's avoid actually deleting and instead just rename the domain directory
  // system("rm -r $domain", $output, $retval);
  system("mv $domain $domain-DELETE", $retval);
}

// xenman clone [domnane] [ [name] [ [path] ] ]
//
if ($method == "clone") {
  if ($argc < 4) {
    echo $usage;
    exit(1);
  }
  $domid = exec("xl domid $domname", $output, $retval);
  if ($retval == 0) {
    echo "xenman: $domname must be shut down first\n";
    exit(1);
  }
  $clone_domname = $argv[3];
  if ($argc < 5)
    $clone_domain = "$domain/$clone_domname";
  else
    $clone_domain = "{$argv[4]}/$clone_domname";

  // create the clone domain
  system("mkdir -p $clone_domain", $retval);
  foreach (glob("$domain/*", GLOB_NOSORT) as $source) {
    // skip subdirs
    if (is_dir($source))
      continue;
    $target = "$clone_domain/".str_replace($domname, $clone_domname, basename($source));
    if ($source === $configfile) {
      $text = file_get_contents($source);
      $text = str_replace($domain, $clone_domain, $text);
      $text = str_replace($domname, $clone_domname, $text);
      file_put_contents($target, $text);
      $clone_configfile = $target;
    }
    else
      copy($source, $target);
  }
  // register the clone
  register($clone_configfile, $domains);
  exit(0);
}

?>
